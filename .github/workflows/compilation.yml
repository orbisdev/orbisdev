name: Build toolchain

on:
  push:
  repository_dispatch:
    types: [run_build]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest ]

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup environment variables
      run: |
        # export first to set globally for $path
        export ORBISDEV=$PWD/orbisdev
        echo "ORBISDEV=$PWD/orbisdev" >> $GITHUB_ENV
        echo "PATH=$ORBISDEV/bin:$PATH" >> $GITHUB_ENV

    - name: Install Ubuntu dependencies
      if: runner.os == 'Linux'
      run: |
        wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
        sudo dpkg -i packages-microsoft-prod.deb
        sudo apt update
        sudo apt install libgmp-dev bison flex make texinfo wget m4 cmake findutils ninja-build clang g++ dotnet-runtime-3.1 dotnet-sdk-3.1

    - name: Install Mac dependencies
      if: runner.os == 'macOS'
      run: |
        brew update
        brew install texinfo bison flex ninja

    - name: Runs all the stages in the shell
      run: ./build-all.sh

    - name: Compress orbisdev folder
      run: tar -zcvf orbisdev-${{matrix.os}}.tar.gz orbisdev

    - name: Upload for Release
      uses: actions/upload-artifact@v3
      with:
        path: orbisdev-${{matrix.os}}.tar.gz
        if-no-files-found: error
        retention-days: 1

  publish:
    needs: build
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Push release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create 1.0${{ GITHUB.RUN_NUMBER }} artifact/*.tar.gz --target ${{ GITHUB.SHA }} -t 1.0${{ GITHUB.RUN_NUMBER }}
